import logging
import os
import numpy as np
import pandas as pd
import requests
import tensorflow as tf
import matplotlib.pyplot as plt

from ta.momentum import RSIIndicator
from ta.trend import MACD
from sklearn.preprocessing import MinMaxScaler

from telegram import Update, InputFile
from telegram.ext import ApplicationBuilder, ContextTypes, CommandHandler

from apscheduler.schedulers.background import BackgroundScheduler

# === üîê –ö–æ–Ω—Ñ—ñ–≥ ===
TELEGRAM_TOKEN = "YOUR_BOT_TOKEN"
CHAT_ID = YOUR_CHAT_ID
MODEL_PATH = "btc_lstm_model.h5"

# === üì• Binance API –¥–∞–Ω—ñ ===
def get_btc_data():
    url = "https://api.binance.com/api/v3/klines"
    params = {
        "symbol": "BTCUSDT",
        "interval": "1m",
        "limit": 500  # ~8 –≥–æ–¥–∏–Ω
    }
    response = requests.get(url, params=params)
    data = response.json()
    df = pd.DataFrame(data, columns=[
        'timestamp', 'open', 'high', 'low', 'close', 'volume',
        'close_time', 'quote_volume', 'trades', 'taker_base', 'taker_quote', 'ignore'
    ])
    df['close'] = pd.to_numeric(df['close'])
    df['volume'] = pd.to_numeric(df['volume'])
    df['quote_volume'] = pd.to_numeric(df['quote_volume'])
    return df[['close', 'volume', 'quote_volume']]

# === ‚öôÔ∏è –î–æ–¥–∞–≤–∞–Ω–Ω—è —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä—ñ–≤ ===
def prepare_features(df):
    df = df.copy()
    df['RSI'] = RSIIndicator(close=df['close'], window=14).rsi()
    macd = MACD(close=df['close'])
    df['MACD'] = macd.macd_diff()
    df.dropna(inplace=True)
    return df

# === üß† –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –º–æ–¥–µ–ª—ñ ===
def create_model(input_shape):
    model = tf.keras.models.Sequential([
        tf.keras.layers.LSTM(64, return_sequences=True, input_shape=input_shape),
        tf.keras.layers.Dropout(0.2),
        tf.keras.layers.LSTM(64),
        tf.keras.layers.Dropout(0.2),
        tf.keras.layers.Dense(1)
    ])
    model.compile(optimizer='adam', loss='mse')
    return model

# === üß† –ü—Ä–æ–≥–Ω–æ–∑ –∑ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è–º/–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è–º ===
def predict_lstm(df, forecast_minutes=60):
    scaler = MinMaxScaler()
    scaled = scaler.fit_transform(df)

    X = []
    for i in range(60, len(scaled)):
        X.append(scaled[i-60:i])
    X = np.array(X)
    y = scaled[60:, 0]

    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∞–±–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –º–æ–¥–µ–ª—ñ
    if os.path.exists(MODEL_PATH):
        model = tf.keras.models.load_model(MODEL_PATH)
    else:
        model = create_model((X.shape[1], X.shape[2]))
        model.fit(X, y, epochs=7, batch_size=32, verbose=0)
        model.save(MODEL_PATH)

    # –ü—Ä–æ–≥–Ω–æ–∑ –º–∞–π–±—É—Ç–Ω—å–æ–≥–æ
    last_seq = scaled[-60:]
    predictions_scaled = []

    for _ in range(forecast_minutes):
        input_seq = np.expand_dims(last_seq, axis=0)
        pred = model.predict(input_seq, verbose=0)
        predictions_scaled.append(pred[0][0])

        # –≥–æ—Ç—É—î–º–æ –Ω–∞—Å—Ç—É–ø–Ω–∏–π –∫—Ä–æ–∫
        next_input = np.append(last_seq[1:], [[pred[0][0]] + [0]*(scaled.shape[1]-1)], axis=0)
        last_seq = next_input

    predictions = scaler.inverse_transform(
        np.hstack([
            np.array(predictions_scaled).reshape(-1,1),
            np.zeros((forecast_minutes, scaled.shape[1] - 1))
        ])
    )[:, 0]

    current_price = df['close'].iloc[-1]
    return current_price, predictions

# === üìà –ü–æ–±—É–¥–æ–≤–∞ –≥—Ä–∞—Ñ—ñ–∫—É ===
def plot_prediction(actual, predicted):
    plt.figure(figsize=(10, 5))
    plt.plot(range(len(actual)), actual, label="Actual", color="blue")
    plt.plot(range(len(actual), len(actual) + len(predicted)), predicted, label="Forecast", color="orange")
    plt.xlabel("–ß–∞—Å (—Ö–≤–∏–ª–∏–Ω–∏)")
    plt.ylabel("–¶—ñ–Ω–∞ BTC")
    plt.title("–ü—Ä–æ–≥–Ω–æ–∑ —Ü—ñ–Ω–∏ Bitcoin")
    plt.legend()
    plt.tight_layout()
    plt.savefig("forecast.png")
    plt.close()

# === üì§ –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É ===
async def send_forecast(app, minutes=60):
    try:
        df = get_btc_data()
        df_feat = prepare_features(df)
        actual = df_feat['close'][-60:].tolist()
        current, forecast = predict_lstm(df_feat, forecast_minutes=minutes)

        diff = forecast[-1] - current
        trend = "‚¨Ü –ó—Ä–æ—Å—Ç–∞–Ω–Ω—è" if diff > 0 else "‚¨á –ü–∞–¥—ñ–Ω–Ω—è"

        plot_prediction(actual, forecast)

        msg = (
            f"üìä –ü—Ä–æ–≥–Ω–æ–∑ BTC –Ω–∞ {minutes} —Ö–≤:\n"
            f"üí∞ –ü–æ—Ç–æ—á–Ω–∞ —Ü—ñ–Ω–∞: {current:.2f} USDT\n"
            f"üîÆ –ü—Ä–æ–≥–Ω–æ–∑: {forecast[-1]:.2f} USDT\n"
            f"üìà –û—á—ñ–∫—É–≤–∞–Ω–∏–π —Ä—É—Ö: {trend} ({diff:+.2f} USDT)"
        )

        await app.bot.send_message(chat_id=CHAT_ID, text=msg)
        with open("forecast.png", "rb") as img:
            await app.bot.send_photo(chat_id=CHAT_ID, photo=InputFile(img))
    except Exception as e:
        logging.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑—É: {e}")

# === ü§ñ Telegram –∫–æ–º–∞–Ω–¥–∏ ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üëã –Ø BTC-–ø—Ä–æ–≥–Ω–æ–∑ –±–æ—Ç. –ù–∞–ø–∏—à–∏ /predict —â–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø—Ä–æ–≥–Ω–æ–∑.")

async def manual_predict(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await send_forecast(context.application, minutes=60)

async def predict30(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await send_forecast(context.application, minutes=30)

async def predict120(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await send_forecast(context.application, minutes=120)

# === üü¢ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ===
def main():
    logging.basicConfig(level=logging.INFO)
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("predict", manual_predict))
    app.add_handler(CommandHandler("predict30", predict30))
    app.add_handler(CommandHandler("predict120", predict120))

    scheduler = BackgroundScheduler()
    scheduler.add_job(lambda: app.create_task(send_forecast(app, minutes=60)), 'interval', minutes=10)
    scheduler.start()

    print("‚úÖ –ë–æ—Ç –ø—Ä–∞—Ü—é—î")
    app.run_polling()

if __name__ == "__main__":
    main()
